#! /usr/bin/env python

import tensorflow as tf
import numpy as np
import os
import time
import datetime
import data_helpers
import word2vec_helpers
from text_cnn import TextCNN
import csv

# Parameters
# ==================================================
tf.flags.DEFINE_string("test_dir", "./result", "Test data source to evaluate.")
# Data Parameters
tf.flags.DEFINE_string("input_text_file", "./1.api", "Test text data source to evaluate.")
tf.flags.DEFINE_string("input_label_file", "./data/tag", "Label file for test text data source.")

# Eval Parameters
tf.flags.DEFINE_integer("batch_size", 64, "Batch Size (default: 64)")
tf.flags.DEFINE_string("checkpoint_dir", "./runs/1542683115/checkpoint/", "Checkpoint directory from training run")
tf.flags.DEFINE_boolean("eval_train", False, "Evaluate on all training data")

# Misc Parameters
tf.flags.DEFINE_boolean("allow_soft_placement", True, "Allow device soft device placement")
tf.flags.DEFINE_boolean("log_device_placement", False, "Log placement of ops on devices")

FLAGS = tf.flags.FLAGS
FLAGS.flag_values_dict
print("\nParameters:")
for attr, value in sorted(FLAGS.__flags.items()):
    print("{}={}".format(attr.upper(), value))
print("")

# validate
# ==================================================

# validate checkout point file
checkpoint_file = tf.train.latest_checkpoint(FLAGS.checkpoint_dir)
if checkpoint_file is None:
    print("Cannot find a valid checkpoint file!")
    exit(0)
print("Using checkpoint file : {}".format(checkpoint_file))

# validate word2vec model file
trained_word2vec_model_file = os.path.join(FLAGS.checkpoint_dir, "..", "trained_word2vec.model")
if not os.path.exists(trained_word2vec_model_file):
    print("Word2vec model file \'{}\' doesn't exist!".format(trained_word2vec_model_file))
print("Using word2vec model file : {}".format(trained_word2vec_model_file))

# validate training params file
training_params_file = os.path.join(FLAGS.checkpoint_dir, "..", "training_params.pickle")
if not os.path.exists(training_params_file):
    print("Training params file \'{}\' is missing!".format(training_params_file))
print("Using training params file : {}".format(training_params_file))

# Load params
params = data_helpers.loadDict(training_params_file)
num_labels = int(params['num_labels'])
max_document_length = int(params['max_document_length'])

# Load data
'''
if FLAGS.eval_train:
    x_raw, y_test = data_helpers.load_data_and_labels(FLAGS.input_text_file, FLAGS.input_label_file, num_labels)
else:
    x_raw = data_helpers.load_detect_data(FLAGS.input_text_file)
    #x_raw = ["a masterpiece four years in the making", "everything is off."]
    #y_test = [1, 0]
# Get Embedding vector x_tes
sentences, max_document_length = data_helpers.padding_sentences(x_raw, '<PADDING>', padding_sentence_length = max_document_length)
x_test = np.array(word2vec_helpers.embedding_sentences(sentences, file_to_load = trained_word2vec_model_file))
print("x_test.shape = {}".format(x_test.shape))

'''

# Evaluation
# ==================================================
print("\nEvaluating...\n")
checkpoint_file = tf.train.latest_checkpoint(FLAGS.checkpoint_dir)
graph = tf.Graph()
with graph.as_default():
    session_conf = tf.ConfigProto(
      allow_soft_placement=FLAGS.allow_soft_placement,
      log_device_placement=FLAGS.log_device_placement)
    sess = tf.Session(config=session_conf)
    with sess.as_default():
        # Load the saved meta graph and restore variables
        saver = tf.train.import_meta_graph("{}.meta".format(checkpoint_file))
        saver.restore(sess, checkpoint_file)
        result = open("./detect_result",'w+')
        result1 = open("./detect_result1",'w+')
        result.truncate()
	index = 0
        for file in os.listdir(FLAGS.test_dir):
            if file.split('.')[1] != 'api':
                continue
            filename = FLAGS.test_dir + '/'+ file
	    x_raw = data_helpers.load_detect_data(filename)
	    sentences, max_document_length = data_helpers.padding_sentences(x_raw, '<PADDING>', padding_sentence_length = max_document_length)
            x_test = np.array(word2vec_helpers.embedding_sentences(sentences, file_to_load = trained_word2vec_model_file))
            index += 1
            # Get the placeholders from the graph by name
            input_x = graph.get_operation_by_name("input_x").outputs[0]
        # input_y = graph.get_operation_by_name("input_y").outputs[0]
            dropout_keep_prob = graph.get_operation_by_name("dropout_keep_prob").outputs[0]

        # Tensors we want to evaluate
            predictions = graph.get_operation_by_name("output/predictions").outputs[0]

        # Collect the predictions here
           # all_predictions = sess.run(predictions, {input_x: x_test, dropout_keep_prob: 1.0})
            batches = data_helpers.batch_iter(list(x_test),1 , 1, shuffle=False)
            all_predictions = []

            for x_test_batch in batches:
            #print(x_test_batch)
                batch_predictions = sess.run(predictions, {input_x: x_test_batch, dropout_keep_prob: 1.0})
            #print(str(batch_predictions))
                all_predictions = np.concatenate([all_predictions, batch_predictions])
                #print(str(all_predictions))

            file = file.split('.')[0]
            split_list = file.split('_')
            split_count = len(split_list)
            container_name = split_list[2]
            test_elf = '/'
            for num in range(4,split_count - 1):
                test_elf = test_elf + split_list[num] + '/'
            test_elf = test_elf + split_list[split_count -1]
            predict_class = all_predictions[0]
            #print('predict_class = %d' %(all_predictions[0]))
            if predict_class == 1:
                #print('program %s in container %s is normal' %(test_elf,container_name))
                print >> result1,'program %s in container %s is normal' %(test_elf,container_name)
            else:
                #print('program %s in container %s is malicious' %(test_elf,container_name))
                print >> result,'program %s in container %s is malicious' %(test_elf,container_name)
	result.close()
# Print accuracy if y_test is defined
'''
if all_predictions is not None:
    print("Total number of test examples: {}".format(len(all_predictions)))
    print("result is "+str(all_predictions))
'''
